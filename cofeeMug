

#include <iostream>
#include <cstdlib>
#include <GL/glew.h>
#include <GLFW/glfw3.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

void drawCoffeeMug() {
    // Draw the body of the mug using glutSolidCylinder
    glColor3f(0.5, 0.5, 0.5);  // Gray color
    glutSolidCylinder(1.0, 2.0, 50, 50);

    // Draw the handle using glutSolidTorus
    glTranslatef(0.75, 0.0, 0.0);  // Translate to the position for the handle
    glutSolidTorus(0.2, 0.5, 50, 50);
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();

    // Use GLM for perspective and view matrix
    glm::mat4 projection = glm::perspective(glm::radians(45.0f), 1.0f, 1.0f, 100.0f);
    glm::mat4 view = glm::lookAt(glm::vec3(3, 3, 3), glm::vec3(0, 0, 0), glm::vec3(0, 1, 0));
    glMultMatrixf(glm::value_ptr(projection));
    glMultMatrixf(glm::value_ptr(view));

    // Apply transformations using GLM
    glm::mat4 model = glm::mat4(1.0f);

    // Body of the mug
    model = glm::translate(model, glm::vec3(0.0, 0.5, 0.0));
    model = glm::rotate(model, glm::radians(45.0f), glm::vec3(1.0, 0.0, 0.0));
    model = glm::scale(model, glm::vec3(1.0, 1.0, 1.0));
    glMultMatrixf(glm::value_ptr(model));

    // Draw the body of the mug
    glColor3f(0.5, 0.5, 0.5);
    glutSolidCylinder(1.0, 2.0, 50, 50);

    // Reset transformation matrix for the handle
    glLoadIdentity();

    // Handle transformations
    model = glm::translate(model, glm::vec3(1.5, 0.0, 0.0));
    glMultMatrixf(glm::value_ptr(model));

    // Draw the handle
    glColor3f(0.0, 0.0, 0.0);
    glutSolidTorus(0.2, 0.5, 50, 50);

    glutSwapBuffers();
}

void reshape(int w, int h) {
    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0, (float)w / (float)h, 1.0, 100.0);
    glMatrixMode(GL_MODELVIEW);
}

int main() {
    if (!glfwInit()) {
        std::cerr << "Failed to initialize GLFW" << std::endl;
        return EXIT_FAILURE;
    }

    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 2);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 0);

    GLFWwindow* window = glfwCreateWindow(800, 600, "OpenGL Coffee Mug", nullptr, nullptr);
    if (!window) {
        std::cerr << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return EXIT_FAILURE;
    }

    glfwMakeContextCurrent(window);

    if (glewInit() != GLEW_OK) {
        std::cerr << "Failed to initialize GLEW" << std::endl;
        return EXIT_FAILURE;
    }

    glEnable(GL_DEPTH_TEST);

    glfwSetFramebufferSizeCallback(window, reshape);

    while (!glfwWindowShouldClose(window)) {
        display();
        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    glfwTerminate();
    return 0;
}
