
#include <iostream>
#include <cstdlib>
#include <GL/glew.h>
#include <GLFW/glfw3.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

GLuint pyramidVAO;
GLuint vertexBuffer;
GLuint colorBuffer;
GLuint indexBuffer;

void setupBuffers() {
    // Vertices
    std::vector<glm::vec3> vertices = {
        glm::vec3(0.0f, 1.0f, 0.0f),  // Top
        glm::vec3(-1.0f, -1.0f, 1.0f),  // Bottom left
        glm::vec3(1.0f, -1.0f, 1.0f),   // Bottom right
        glm::vec3(1.0f, -1.0f, -1.0f),  // Top right
        glm::vec3(-1.0f, -1.0f, -1.0f)  // Top left
    };

    // Colors
    std::vector<glm::vec3> colors = {
        glm::vec3(1.0f, 0.0f, 1.0f),  // Pink (Top)
        glm::vec3(1.0f, 1.0f, 0.0f),  // Yellow (Bottom left)
        glm::vec3(0.0f, 0.0f, 1.0f),  // Blue (Bottom right)
        glm::vec3(0.0f, 1.0f, 0.0f),  // Green (Top right)
        glm::vec3(1.0f, 0.5f, 0.8f)   // Pink (Top left)
    };

    // Indices
    std::vector<unsigned int> indices = {
        0, 1, 2,  // Top face
        0, 2, 3,  // Right face
        0, 3, 4,  // Bottom face
        0, 4, 1,  // Left face
        1, 2, 3,  // Front face
        1, 3, 4   // Back face
    };

    glGenVertexArrays(1, &pyramidVAO);
    glBindVertexArray(pyramidVAO);

    glGenBuffers(1, &vertexBuffer);
    glBindBuffer(GL_ARRAY_BUFFER, vertexBuffer);
    glBufferData(GL_ARRAY_BUFFER, vertices.size() * sizeof(glm::vec3), vertices.data(), GL_STATIC_DRAW);
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, nullptr);
    glEnableVertexAttribArray(0);

    glGenBuffers(1, &colorBuffer);
    glBindBuffer(GL_ARRAY_BUFFER, colorBuffer);
    glBufferData(GL_ARRAY_BUFFER, colors.size() * sizeof(glm::vec3), colors.data(), GL_STATIC_DRAW);
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, nullptr);
    glEnableVertexAttribArray(1);

    glGenBuffers(1, &indexBuffer);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, indexBuffer);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size() * sizeof(unsigned int), indices.data(), GL_STATIC_DRAW);
}

void drawPyramid() {
    glBindVertexArray(pyramidVAO);
    glDrawElements(GL_TRIANGLES, 18, GL_UNSIGNED_INT, nullptr);
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    // Apply perspective projection
    glm::mat4 projection = glm::perspective(glm::radians(45.0f), 1.0f, 1.0f, 10.0f);
    glMatrixMode(GL_PROJECTION);
    glLoadMatrixf(glm::value_ptr(projection));

    // Apply modelview transformation
    glm::mat4 view = glm::lookAt(glm::vec3(2.0f, 2.0f, 5.0f), glm::vec3(0.0f, 0.0f, 0.0f), glm::vec3(0.0f, 1.0f, 0.0f));
    glMatrixMode(GL_MODELVIEW);
    glLoadMatrixf(glm::value_ptr(view));

    drawPyramid();

    glfwSwapBuffers(window);
}

void reshape(GLFWwindow* window, int width, int height) {
    glViewport(0, 0, width, height);
}

int main() {
    if (!glfwInit()) {
        std::cerr << "Failed to initialize GLFW" << std::endl;
        return EXIT_FAILURE;
    }

    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 2);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 0);

    GLFWwindow* window = glfwCreateWindow(800, 600, "OpenGL Pyramid Example", nullptr, nullptr);
    if (!window) {
        std::cerr << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return EXIT_FAILURE;
    }

    glfwMakeContextCurrent(window);

    if (glewInit() != GLEW_OK) {
        std::cerr << "Failed to initialize GLEW" << std::endl;
        return EXIT_FAILURE;
    }

    glEnable(GL_DEPTH_TEST);

    setupBuffers();

    glfwSetFramebufferSizeCallback(window, reshape);

    while (!glfwWindowShouldClose(window)) {
        display();
        glfwPollEvents();
    }

    glfwTerminate();
    return 0;
}
